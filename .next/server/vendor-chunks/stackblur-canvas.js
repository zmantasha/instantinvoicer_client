/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stackblur-canvas";
exports.ids = ["vendor-chunks/stackblur-canvas"];
exports.modules = {

/***/ "(ssr)/./node_modules/stackblur-canvas/dist/stackblur.js":
/*!*********************************************************!*\
  !*** ./node_modules/stackblur-canvas/dist/stackblur.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  0;\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  /* eslint-disable no-bitwise -- used for calculations */\n\n  /* eslint-disable unicorn/prefer-query-selector -- aiming at\n    backward-compatibility */\n\n  /**\n  * StackBlur - a fast almost Gaussian Blur For Canvas\n  *\n  * In case you find this class useful - especially in commercial projects -\n  * I am not totally unhappy for a small donation to my PayPal account\n  * mario@quasimondo.de\n  *\n  * Or support me on flattr:\n  * {@link https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript}.\n  *\n  * @module StackBlur\n  * @author Mario Klingemann\n  * Contact: mario@quasimondo.com\n  * Website: {@link http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html}\n  * Twitter: @quasimondo\n  *\n  * @copyright (c) 2010 Mario Klingemann\n  *\n  * Permission is hereby granted, free of charge, to any person\n  * obtaining a copy of this software and associated documentation\n  * files (the \"Software\"), to deal in the Software without\n  * restriction, including without limitation the rights to use,\n  * copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the\n  * Software is furnished to do so, subject to the following\n  * conditions:\n  *\n  * The above copyright notice and this permission notice shall be\n  * included in all copies or substantial portions of the Software.\n  *\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n  * OTHER DEALINGS IN THE SOFTWARE.\n  */\n  var mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\n  var shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n  /**\n   * @param {string|HTMLImageElement} img\n   * @param {string|HTMLCanvasElement} canvas\n   * @param {Float} radius\n   * @param {boolean} blurAlphaChannel\n   * @param {boolean} useOffset\n   * @param {boolean} skipStyles\n   * @returns {undefined}\n   */\n\n  function processImage(img, canvas, radius, blurAlphaChannel, useOffset, skipStyles) {\n    if (typeof img === 'string') {\n      img = document.getElementById(img);\n    }\n\n    if (!img || Object.prototype.toString.call(img).slice(8, -1) === 'HTMLImageElement' && !('naturalWidth' in img)) {\n      return;\n    }\n\n    var dimensionType = useOffset ? 'offset' : 'natural';\n    var w = img[dimensionType + 'Width'];\n    var h = img[dimensionType + 'Height']; // add ImageBitmap support,can blur texture source\n\n    if (Object.prototype.toString.call(img).slice(8, -1) === 'ImageBitmap') {\n      w = img.width;\n      h = img.height;\n    }\n\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n    }\n\n    if (!canvas || !('getContext' in canvas)) {\n      return;\n    }\n\n    if (!skipStyles) {\n      canvas.style.width = w + 'px';\n      canvas.style.height = h + 'px';\n    }\n\n    canvas.width = w;\n    canvas.height = h;\n    var context = canvas.getContext('2d');\n    context.clearRect(0, 0, w, h);\n    context.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight, 0, 0, w, h);\n\n    if (isNaN(radius) || radius < 1) {\n      return;\n    }\n\n    if (blurAlphaChannel) {\n      processCanvasRGBA(canvas, 0, 0, w, h, radius);\n    } else {\n      processCanvasRGB(canvas, 0, 0, w, h, radius);\n    }\n  }\n  /**\n   * @param {string|HTMLCanvasElement} canvas\n   * @param {Integer} topX\n   * @param {Integer} topY\n   * @param {Integer} width\n   * @param {Integer} height\n   * @throws {Error|TypeError}\n   * @returns {ImageData} See {@link https://html.spec.whatwg.org/multipage/canvas.html#imagedata}\n   */\n\n\n  function getImageDataFromCanvas(canvas, topX, topY, width, height) {\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n    }\n\n    if (!canvas || _typeof(canvas) !== 'object' || !('getContext' in canvas)) {\n      throw new TypeError('Expecting canvas with `getContext` method ' + 'in processCanvasRGB(A) calls!');\n    }\n\n    var context = canvas.getContext('2d');\n\n    try {\n      return context.getImageData(topX, topY, width, height);\n    } catch (e) {\n      throw new Error('unable to access image data: ' + e);\n    }\n  }\n  /**\n   * @param {HTMLCanvasElement} canvas\n   * @param {Integer} topX\n   * @param {Integer} topY\n   * @param {Integer} width\n   * @param {Integer} height\n   * @param {Float} radius\n   * @returns {undefined}\n   */\n\n\n  function processCanvasRGBA(canvas, topX, topY, width, height, radius) {\n    if (isNaN(radius) || radius < 1) {\n      return;\n    }\n\n    radius |= 0;\n    var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n    imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);\n    canvas.getContext('2d').putImageData(imageData, topX, topY);\n  }\n  /**\n   * @param {ImageData} imageData\n   * @param {Integer} topX\n   * @param {Integer} topY\n   * @param {Integer} width\n   * @param {Integer} height\n   * @param {Float} radius\n   * @returns {ImageData}\n   */\n\n\n  function processImageDataRGBA(imageData, topX, topY, width, height, radius) {\n    var pixels = imageData.data;\n    var div = 2 * radius + 1; // const w4 = width << 2;\n\n    var widthMinus1 = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1 = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    var stackEnd;\n\n    for (var i = 1; i < div; i++) {\n      stack = stack.next = new BlurStack();\n\n      if (i === radiusPlus1) {\n        stackEnd = stack;\n      }\n    }\n\n    stack.next = stackStart;\n    var stackIn = null,\n        stackOut = null,\n        yw = 0,\n        yi = 0;\n    var mulSum = mulTable[radius];\n    var shgSum = shgTable[radius];\n\n    for (var y = 0; y < height; y++) {\n      stack = stackStart;\n      var pr = pixels[yi],\n          pg = pixels[yi + 1],\n          pb = pixels[yi + 2],\n          pa = pixels[yi + 3];\n\n      for (var _i = 0; _i < radiusPlus1; _i++) {\n        stack.r = pr;\n        stack.g = pg;\n        stack.b = pb;\n        stack.a = pa;\n        stack = stack.next;\n      }\n\n      var rInSum = 0,\n          gInSum = 0,\n          bInSum = 0,\n          aInSum = 0,\n          rOutSum = radiusPlus1 * pr,\n          gOutSum = radiusPlus1 * pg,\n          bOutSum = radiusPlus1 * pb,\n          aOutSum = radiusPlus1 * pa,\n          rSum = sumFactor * pr,\n          gSum = sumFactor * pg,\n          bSum = sumFactor * pb,\n          aSum = sumFactor * pa;\n\n      for (var _i2 = 1; _i2 < radiusPlus1; _i2++) {\n        var p = yi + ((widthMinus1 < _i2 ? widthMinus1 : _i2) << 2);\n        var r = pixels[p],\n            g = pixels[p + 1],\n            b = pixels[p + 2],\n            a = pixels[p + 3];\n        var rbs = radiusPlus1 - _i2;\n        rSum += (stack.r = r) * rbs;\n        gSum += (stack.g = g) * rbs;\n        bSum += (stack.b = b) * rbs;\n        aSum += (stack.a = a) * rbs;\n        rInSum += r;\n        gInSum += g;\n        bInSum += b;\n        aInSum += a;\n        stack = stack.next;\n      }\n\n      stackIn = stackStart;\n      stackOut = stackEnd;\n\n      for (var x = 0; x < width; x++) {\n        var paInitial = aSum * mulSum >>> shgSum;\n        pixels[yi + 3] = paInitial;\n\n        if (paInitial !== 0) {\n          var _a2 = 255 / paInitial;\n\n          pixels[yi] = (rSum * mulSum >>> shgSum) * _a2;\n          pixels[yi + 1] = (gSum * mulSum >>> shgSum) * _a2;\n          pixels[yi + 2] = (bSum * mulSum >>> shgSum) * _a2;\n        } else {\n          pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n        }\n\n        rSum -= rOutSum;\n        gSum -= gOutSum;\n        bSum -= bOutSum;\n        aSum -= aOutSum;\n        rOutSum -= stackIn.r;\n        gOutSum -= stackIn.g;\n        bOutSum -= stackIn.b;\n        aOutSum -= stackIn.a;\n\n        var _p = x + radius + 1;\n\n        _p = yw + (_p < widthMinus1 ? _p : widthMinus1) << 2;\n        rInSum += stackIn.r = pixels[_p];\n        gInSum += stackIn.g = pixels[_p + 1];\n        bInSum += stackIn.b = pixels[_p + 2];\n        aInSum += stackIn.a = pixels[_p + 3];\n        rSum += rInSum;\n        gSum += gInSum;\n        bSum += bInSum;\n        aSum += aInSum;\n        stackIn = stackIn.next;\n        var _stackOut = stackOut,\n            _r = _stackOut.r,\n            _g = _stackOut.g,\n            _b = _stackOut.b,\n            _a = _stackOut.a;\n        rOutSum += _r;\n        gOutSum += _g;\n        bOutSum += _b;\n        aOutSum += _a;\n        rInSum -= _r;\n        gInSum -= _g;\n        bInSum -= _b;\n        aInSum -= _a;\n        stackOut = stackOut.next;\n        yi += 4;\n      }\n\n      yw += width;\n    }\n\n    for (var _x = 0; _x < width; _x++) {\n      yi = _x << 2;\n\n      var _pr = pixels[yi],\n          _pg = pixels[yi + 1],\n          _pb = pixels[yi + 2],\n          _pa = pixels[yi + 3],\n          _rOutSum = radiusPlus1 * _pr,\n          _gOutSum = radiusPlus1 * _pg,\n          _bOutSum = radiusPlus1 * _pb,\n          _aOutSum = radiusPlus1 * _pa,\n          _rSum = sumFactor * _pr,\n          _gSum = sumFactor * _pg,\n          _bSum = sumFactor * _pb,\n          _aSum = sumFactor * _pa;\n\n      stack = stackStart;\n\n      for (var _i3 = 0; _i3 < radiusPlus1; _i3++) {\n        stack.r = _pr;\n        stack.g = _pg;\n        stack.b = _pb;\n        stack.a = _pa;\n        stack = stack.next;\n      }\n\n      var yp = width;\n      var _gInSum = 0,\n          _bInSum = 0,\n          _aInSum = 0,\n          _rInSum = 0;\n\n      for (var _i4 = 1; _i4 <= radius; _i4++) {\n        yi = yp + _x << 2;\n\n        var _rbs = radiusPlus1 - _i4;\n\n        _rSum += (stack.r = _pr = pixels[yi]) * _rbs;\n        _gSum += (stack.g = _pg = pixels[yi + 1]) * _rbs;\n        _bSum += (stack.b = _pb = pixels[yi + 2]) * _rbs;\n        _aSum += (stack.a = _pa = pixels[yi + 3]) * _rbs;\n        _rInSum += _pr;\n        _gInSum += _pg;\n        _bInSum += _pb;\n        _aInSum += _pa;\n        stack = stack.next;\n\n        if (_i4 < heightMinus1) {\n          yp += width;\n        }\n      }\n\n      yi = _x;\n      stackIn = stackStart;\n      stackOut = stackEnd;\n\n      for (var _y = 0; _y < height; _y++) {\n        var _p2 = yi << 2;\n\n        pixels[_p2 + 3] = _pa = _aSum * mulSum >>> shgSum;\n\n        if (_pa > 0) {\n          _pa = 255 / _pa;\n          pixels[_p2] = (_rSum * mulSum >>> shgSum) * _pa;\n          pixels[_p2 + 1] = (_gSum * mulSum >>> shgSum) * _pa;\n          pixels[_p2 + 2] = (_bSum * mulSum >>> shgSum) * _pa;\n        } else {\n          pixels[_p2] = pixels[_p2 + 1] = pixels[_p2 + 2] = 0;\n        }\n\n        _rSum -= _rOutSum;\n        _gSum -= _gOutSum;\n        _bSum -= _bOutSum;\n        _aSum -= _aOutSum;\n        _rOutSum -= stackIn.r;\n        _gOutSum -= stackIn.g;\n        _bOutSum -= stackIn.b;\n        _aOutSum -= stackIn.a;\n        _p2 = _x + ((_p2 = _y + radiusPlus1) < heightMinus1 ? _p2 : heightMinus1) * width << 2;\n        _rSum += _rInSum += stackIn.r = pixels[_p2];\n        _gSum += _gInSum += stackIn.g = pixels[_p2 + 1];\n        _bSum += _bInSum += stackIn.b = pixels[_p2 + 2];\n        _aSum += _aInSum += stackIn.a = pixels[_p2 + 3];\n        stackIn = stackIn.next;\n        _rOutSum += _pr = stackOut.r;\n        _gOutSum += _pg = stackOut.g;\n        _bOutSum += _pb = stackOut.b;\n        _aOutSum += _pa = stackOut.a;\n        _rInSum -= _pr;\n        _gInSum -= _pg;\n        _bInSum -= _pb;\n        _aInSum -= _pa;\n        stackOut = stackOut.next;\n        yi += width;\n      }\n    }\n\n    return imageData;\n  }\n  /**\n   * @param {HTMLCanvasElement} canvas\n   * @param {Integer} topX\n   * @param {Integer} topY\n   * @param {Integer} width\n   * @param {Integer} height\n   * @param {Float} radius\n   * @returns {undefined}\n   */\n\n\n  function processCanvasRGB(canvas, topX, topY, width, height, radius) {\n    if (isNaN(radius) || radius < 1) {\n      return;\n    }\n\n    radius |= 0;\n    var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n    imageData = processImageDataRGB(imageData, topX, topY, width, height, radius);\n    canvas.getContext('2d').putImageData(imageData, topX, topY);\n  }\n  /**\n   * @param {ImageData} imageData\n   * @param {Integer} topX\n   * @param {Integer} topY\n   * @param {Integer} width\n   * @param {Integer} height\n   * @param {Float} radius\n   * @returns {ImageData}\n   */\n\n\n  function processImageDataRGB(imageData, topX, topY, width, height, radius) {\n    var pixels = imageData.data;\n    var div = 2 * radius + 1; // const w4 = width << 2;\n\n    var widthMinus1 = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1 = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    var stackEnd;\n\n    for (var i = 1; i < div; i++) {\n      stack = stack.next = new BlurStack();\n\n      if (i === radiusPlus1) {\n        stackEnd = stack;\n      }\n    }\n\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n    var mulSum = mulTable[radius];\n    var shgSum = shgTable[radius];\n    var p, rbs;\n    var yw = 0,\n        yi = 0;\n\n    for (var y = 0; y < height; y++) {\n      var pr = pixels[yi],\n          pg = pixels[yi + 1],\n          pb = pixels[yi + 2],\n          rOutSum = radiusPlus1 * pr,\n          gOutSum = radiusPlus1 * pg,\n          bOutSum = radiusPlus1 * pb,\n          rSum = sumFactor * pr,\n          gSum = sumFactor * pg,\n          bSum = sumFactor * pb;\n      stack = stackStart;\n\n      for (var _i5 = 0; _i5 < radiusPlus1; _i5++) {\n        stack.r = pr;\n        stack.g = pg;\n        stack.b = pb;\n        stack = stack.next;\n      }\n\n      var rInSum = 0,\n          gInSum = 0,\n          bInSum = 0;\n\n      for (var _i6 = 1; _i6 < radiusPlus1; _i6++) {\n        p = yi + ((widthMinus1 < _i6 ? widthMinus1 : _i6) << 2);\n        rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - _i6);\n        gSum += (stack.g = pg = pixels[p + 1]) * rbs;\n        bSum += (stack.b = pb = pixels[p + 2]) * rbs;\n        rInSum += pr;\n        gInSum += pg;\n        bInSum += pb;\n        stack = stack.next;\n      }\n\n      stackIn = stackStart;\n      stackOut = stackEnd;\n\n      for (var x = 0; x < width; x++) {\n        pixels[yi] = rSum * mulSum >>> shgSum;\n        pixels[yi + 1] = gSum * mulSum >>> shgSum;\n        pixels[yi + 2] = bSum * mulSum >>> shgSum;\n        rSum -= rOutSum;\n        gSum -= gOutSum;\n        bSum -= bOutSum;\n        rOutSum -= stackIn.r;\n        gOutSum -= stackIn.g;\n        bOutSum -= stackIn.b;\n        p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n        rInSum += stackIn.r = pixels[p];\n        gInSum += stackIn.g = pixels[p + 1];\n        bInSum += stackIn.b = pixels[p + 2];\n        rSum += rInSum;\n        gSum += gInSum;\n        bSum += bInSum;\n        stackIn = stackIn.next;\n        rOutSum += pr = stackOut.r;\n        gOutSum += pg = stackOut.g;\n        bOutSum += pb = stackOut.b;\n        rInSum -= pr;\n        gInSum -= pg;\n        bInSum -= pb;\n        stackOut = stackOut.next;\n        yi += 4;\n      }\n\n      yw += width;\n    }\n\n    for (var _x2 = 0; _x2 < width; _x2++) {\n      yi = _x2 << 2;\n\n      var _pr2 = pixels[yi],\n          _pg2 = pixels[yi + 1],\n          _pb2 = pixels[yi + 2],\n          _rOutSum2 = radiusPlus1 * _pr2,\n          _gOutSum2 = radiusPlus1 * _pg2,\n          _bOutSum2 = radiusPlus1 * _pb2,\n          _rSum2 = sumFactor * _pr2,\n          _gSum2 = sumFactor * _pg2,\n          _bSum2 = sumFactor * _pb2;\n\n      stack = stackStart;\n\n      for (var _i7 = 0; _i7 < radiusPlus1; _i7++) {\n        stack.r = _pr2;\n        stack.g = _pg2;\n        stack.b = _pb2;\n        stack = stack.next;\n      }\n\n      var _rInSum2 = 0,\n          _gInSum2 = 0,\n          _bInSum2 = 0;\n\n      for (var _i8 = 1, yp = width; _i8 <= radius; _i8++) {\n        yi = yp + _x2 << 2;\n        _rSum2 += (stack.r = _pr2 = pixels[yi]) * (rbs = radiusPlus1 - _i8);\n        _gSum2 += (stack.g = _pg2 = pixels[yi + 1]) * rbs;\n        _bSum2 += (stack.b = _pb2 = pixels[yi + 2]) * rbs;\n        _rInSum2 += _pr2;\n        _gInSum2 += _pg2;\n        _bInSum2 += _pb2;\n        stack = stack.next;\n\n        if (_i8 < heightMinus1) {\n          yp += width;\n        }\n      }\n\n      yi = _x2;\n      stackIn = stackStart;\n      stackOut = stackEnd;\n\n      for (var _y2 = 0; _y2 < height; _y2++) {\n        p = yi << 2;\n        pixels[p] = _rSum2 * mulSum >>> shgSum;\n        pixels[p + 1] = _gSum2 * mulSum >>> shgSum;\n        pixels[p + 2] = _bSum2 * mulSum >>> shgSum;\n        _rSum2 -= _rOutSum2;\n        _gSum2 -= _gOutSum2;\n        _bSum2 -= _bOutSum2;\n        _rOutSum2 -= stackIn.r;\n        _gOutSum2 -= stackIn.g;\n        _bOutSum2 -= stackIn.b;\n        p = _x2 + ((p = _y2 + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n        _rSum2 += _rInSum2 += stackIn.r = pixels[p];\n        _gSum2 += _gInSum2 += stackIn.g = pixels[p + 1];\n        _bSum2 += _bInSum2 += stackIn.b = pixels[p + 2];\n        stackIn = stackIn.next;\n        _rOutSum2 += _pr2 = stackOut.r;\n        _gOutSum2 += _pg2 = stackOut.g;\n        _bOutSum2 += _pb2 = stackOut.b;\n        _rInSum2 -= _pr2;\n        _gInSum2 -= _pg2;\n        _bInSum2 -= _pb2;\n        stackOut = stackOut.next;\n        yi += width;\n      }\n    }\n\n    return imageData;\n  }\n  /**\n   *\n   */\n\n\n  var BlurStack =\n  /**\n   * Set properties.\n   */\n  function BlurStack() {\n    _classCallCheck(this, BlurStack);\n\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n  };\n\n  exports.BlurStack = BlurStack;\n  exports.canvasRGB = processCanvasRGB;\n  exports.canvasRGBA = processCanvasRGBA;\n  exports.image = processImage;\n  exports.imageDataRGB = processImageDataRGB;\n  exports.imageDataRGBA = processImageDataRGBA;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhY2tibHVyLWNhbnZhcy9kaXN0L3N0YWNrYmx1ci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLEVBQUUsS0FBNEQ7QUFDOUQsRUFBRSxDQUMwRztBQUM1RyxDQUFDLDZCQUE2Qjs7QUFFOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyx1R0FBdUc7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QyxhQUFhLDBCQUEwQjtBQUN2QyxhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsZUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDBCQUEwQjtBQUN2QyxhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFh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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaURBQWlELGFBQWE7O0FBRTlELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvc3RhY2tibHVyLWNhbnZhcy9kaXN0L3N0YWNrYmx1ci5qcz8xMGNjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuU3RhY2tCbHVyID0ge30pKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlIC0tIHVzZWQgZm9yIGNhbGN1bGF0aW9ucyAqL1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIHVuaWNvcm4vcHJlZmVyLXF1ZXJ5LXNlbGVjdG9yIC0tIGFpbWluZyBhdFxuICAgIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgKi9cblxuICAvKipcbiAgKiBTdGFja0JsdXIgLSBhIGZhc3QgYWxtb3N0IEdhdXNzaWFuIEJsdXIgRm9yIENhbnZhc1xuICAqXG4gICogSW4gY2FzZSB5b3UgZmluZCB0aGlzIGNsYXNzIHVzZWZ1bCAtIGVzcGVjaWFsbHkgaW4gY29tbWVyY2lhbCBwcm9qZWN0cyAtXG4gICogSSBhbSBub3QgdG90YWxseSB1bmhhcHB5IGZvciBhIHNtYWxsIGRvbmF0aW9uIHRvIG15IFBheVBhbCBhY2NvdW50XG4gICogbWFyaW9AcXVhc2ltb25kby5kZVxuICAqXG4gICogT3Igc3VwcG9ydCBtZSBvbiBmbGF0dHI6XG4gICoge0BsaW5rIGh0dHBzOi8vZmxhdHRyLmNvbS90aGluZy83Mjc5MS9TdGFja0JsdXItYS1mYXN0LWFsbW9zdC1HYXVzc2lhbi1CbHVyLUVmZmVjdC1mb3ItQ2FudmFzSmF2YXNjcmlwdH0uXG4gICpcbiAgKiBAbW9kdWxlIFN0YWNrQmx1clxuICAqIEBhdXRob3IgTWFyaW8gS2xpbmdlbWFublxuICAqIENvbnRhY3Q6IG1hcmlvQHF1YXNpbW9uZG8uY29tXG4gICogV2Vic2l0ZToge0BsaW5rIGh0dHA6Ly93d3cucXVhc2ltb25kby5jb20vU3RhY2tCbHVyRm9yQ2FudmFzL1N0YWNrQmx1ckRlbW8uaHRtbH1cbiAgKiBUd2l0dGVyOiBAcXVhc2ltb25kb1xuICAqXG4gICogQGNvcHlyaWdodCAoYykgMjAxMCBNYXJpbyBLbGluZ2VtYW5uXG4gICpcbiAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gICogcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4gICogY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAgKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAgKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICAqIGNvbmRpdGlvbnM6XG4gICpcbiAgKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICAqXG4gICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVNcbiAgKiBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4gICogSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksXG4gICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuICAqIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAgKi9cbiAgdmFyIG11bFRhYmxlID0gWzUxMiwgNTEyLCA0NTYsIDUxMiwgMzI4LCA0NTYsIDMzNSwgNTEyLCA0MDUsIDMyOCwgMjcxLCA0NTYsIDM4OCwgMzM1LCAyOTIsIDUxMiwgNDU0LCA0MDUsIDM2NCwgMzI4LCAyOTgsIDI3MSwgNDk2LCA0NTYsIDQyMCwgMzg4LCAzNjAsIDMzNSwgMzEyLCAyOTIsIDI3MywgNTEyLCA0ODIsIDQ1NCwgNDI4LCA0MDUsIDM4MywgMzY0LCAzNDUsIDMyOCwgMzEyLCAyOTgsIDI4NCwgMjcxLCAyNTksIDQ5NiwgNDc1LCA0NTYsIDQzNywgNDIwLCA0MDQsIDM4OCwgMzc0LCAzNjAsIDM0NywgMzM1LCAzMjMsIDMxMiwgMzAyLCAyOTIsIDI4MiwgMjczLCAyNjUsIDUxMiwgNDk3LCA0ODIsIDQ2OCwgNDU0LCA0NDEsIDQyOCwgNDE3LCA0MDUsIDM5NCwgMzgzLCAzNzMsIDM2NCwgMzU0LCAzNDUsIDMzNywgMzI4LCAzMjAsIDMxMiwgMzA1LCAyOTgsIDI5MSwgMjg0LCAyNzgsIDI3MSwgMjY1LCAyNTksIDUwNywgNDk2LCA0ODUsIDQ3NSwgNDY1LCA0NTYsIDQ0NiwgNDM3LCA0MjgsIDQyMCwgNDEyLCA0MDQsIDM5NiwgMzg4LCAzODEsIDM3NCwgMzY3LCAzNjAsIDM1NCwgMzQ3LCAzNDEsIDMzNSwgMzI5LCAzMjMsIDMxOCwgMzEyLCAzMDcsIDMwMiwgMjk3LCAyOTIsIDI4NywgMjgyLCAyNzgsIDI3MywgMjY5LCAyNjUsIDI2MSwgNTEyLCA1MDUsIDQ5NywgNDg5LCA0ODIsIDQ3NSwgNDY4LCA0NjEsIDQ1NCwgNDQ3LCA0NDEsIDQzNSwgNDI4LCA0MjIsIDQxNywgNDExLCA0MDUsIDM5OSwgMzk0LCAzODksIDM4MywgMzc4LCAzNzMsIDM2OCwgMzY0LCAzNTksIDM1NCwgMzUwLCAzNDUsIDM0MSwgMzM3LCAzMzIsIDMyOCwgMzI0LCAzMjAsIDMxNiwgMzEyLCAzMDksIDMwNSwgMzAxLCAyOTgsIDI5NCwgMjkxLCAyODcsIDI4NCwgMjgxLCAyNzgsIDI3NCwgMjcxLCAyNjgsIDI2NSwgMjYyLCAyNTksIDI1NywgNTA3LCA1MDEsIDQ5NiwgNDkxLCA0ODUsIDQ4MCwgNDc1LCA0NzAsIDQ2NSwgNDYwLCA0NTYsIDQ1MSwgNDQ2LCA0NDIsIDQzNywgNDMzLCA0MjgsIDQyNCwgNDIwLCA0MTYsIDQxMiwgNDA4LCA0MDQsIDQwMCwgMzk2LCAzOTIsIDM4OCwgMzg1LCAzODEsIDM3NywgMzc0LCAzNzAsIDM2NywgMzYzLCAzNjAsIDM1NywgMzU0LCAzNTAsIDM0NywgMzQ0LCAzNDEsIDMzOCwgMzM1LCAzMzIsIDMyOSwgMzI2LCAzMjMsIDMyMCwgMzE4LCAzMTUsIDMxMiwgMzEwLCAzMDcsIDMwNCwgMzAyLCAyOTksIDI5NywgMjk0LCAyOTIsIDI4OSwgMjg3LCAyODUsIDI4MiwgMjgwLCAyNzgsIDI3NSwgMjczLCAyNzEsIDI2OSwgMjY3LCAyNjUsIDI2MywgMjYxLCAyNTldO1xuICB2YXIgc2hnVGFibGUgPSBbOSwgMTEsIDEyLCAxMywgMTMsIDE0LCAxNCwgMTUsIDE1LCAxNSwgMTUsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTgsIDE4LCAxOCwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMSwgMjEsIDIxLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjIsIDIyLCAyMiwgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjMsIDIzLCAyMywgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0LCAyNCwgMjQsIDI0XTtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEhUTUxJbWFnZUVsZW1lbnR9IGltZ1xuICAgKiBAcGFyYW0ge3N0cmluZ3xIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzXG4gICAqIEBwYXJhbSB7RmxvYXR9IHJhZGl1c1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJsdXJBbHBoYUNoYW5uZWxcbiAgICogQHBhcmFtIHtib29sZWFufSB1c2VPZmZzZXRcbiAgICogQHBhcmFtIHtib29sZWFufSBza2lwU3R5bGVzXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NJbWFnZShpbWcsIGNhbnZhcywgcmFkaXVzLCBibHVyQWxwaGFDaGFubmVsLCB1c2VPZmZzZXQsIHNraXBTdHlsZXMpIHtcbiAgICBpZiAodHlwZW9mIGltZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGltZyk7XG4gICAgfVxuXG4gICAgaWYgKCFpbWcgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGltZykuc2xpY2UoOCwgLTEpID09PSAnSFRNTEltYWdlRWxlbWVudCcgJiYgISgnbmF0dXJhbFdpZHRoJyBpbiBpbWcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRpbWVuc2lvblR5cGUgPSB1c2VPZmZzZXQgPyAnb2Zmc2V0JyA6ICduYXR1cmFsJztcbiAgICB2YXIgdyA9IGltZ1tkaW1lbnNpb25UeXBlICsgJ1dpZHRoJ107XG4gICAgdmFyIGggPSBpbWdbZGltZW5zaW9uVHlwZSArICdIZWlnaHQnXTsgLy8gYWRkIEltYWdlQml0bWFwIHN1cHBvcnQsY2FuIGJsdXIgdGV4dHVyZSBzb3VyY2VcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW1nKS5zbGljZSg4LCAtMSkgPT09ICdJbWFnZUJpdG1hcCcpIHtcbiAgICAgIHcgPSBpbWcud2lkdGg7XG4gICAgICBoID0gaW1nLmhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNhbnZhcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbnZhcyk7XG4gICAgfVxuXG4gICAgaWYgKCFjYW52YXMgfHwgISgnZ2V0Q29udGV4dCcgaW4gY2FudmFzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc2tpcFN0eWxlcykge1xuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gdyArICdweCc7XG4gICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XG4gICAgfVxuXG4gICAgY2FudmFzLndpZHRoID0gdztcbiAgICBjYW52YXMuaGVpZ2h0ID0gaDtcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHcsIGgpO1xuICAgIGNvbnRleHQuZHJhd0ltYWdlKGltZywgMCwgMCwgaW1nLm5hdHVyYWxXaWR0aCwgaW1nLm5hdHVyYWxIZWlnaHQsIDAsIDAsIHcsIGgpO1xuXG4gICAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChibHVyQWxwaGFDaGFubmVsKSB7XG4gICAgICBwcm9jZXNzQ2FudmFzUkdCQShjYW52YXMsIDAsIDAsIHcsIGgsIHJhZGl1cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3NDYW52YXNSR0IoY2FudmFzLCAwLCAwLCB3LCBoLCByYWRpdXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFhcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BZXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSBoZWlnaHRcbiAgICogQHRocm93cyB7RXJyb3J8VHlwZUVycm9yfVxuICAgKiBAcmV0dXJucyB7SW1hZ2VEYXRhfSBTZWUge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NhbnZhcy5odG1sI2ltYWdlZGF0YX1cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRJbWFnZURhdGFGcm9tQ2FudmFzKGNhbnZhcywgdG9wWCwgdG9wWSwgd2lkdGgsIGhlaWdodCkge1xuICAgIGlmICh0eXBlb2YgY2FudmFzID09PSAnc3RyaW5nJykge1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzKTtcbiAgICB9XG5cbiAgICBpZiAoIWNhbnZhcyB8fCBfdHlwZW9mKGNhbnZhcykgIT09ICdvYmplY3QnIHx8ICEoJ2dldENvbnRleHQnIGluIGNhbnZhcykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGluZyBjYW52YXMgd2l0aCBgZ2V0Q29udGV4dGAgbWV0aG9kICcgKyAnaW4gcHJvY2Vzc0NhbnZhc1JHQihBKSBjYWxscyEnKTtcbiAgICB9XG5cbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb250ZXh0LmdldEltYWdlRGF0YSh0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBhY2Nlc3MgaW1hZ2UgZGF0YTogJyArIGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gdG9wWFxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFlcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB3aWR0aFxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge0Zsb2F0fSByYWRpdXNcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiBwcm9jZXNzQ2FudmFzUkdCQShjYW52YXMsIHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykge1xuICAgIGlmIChpc05hTihyYWRpdXMpIHx8IHJhZGl1cyA8IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByYWRpdXMgfD0gMDtcbiAgICB2YXIgaW1hZ2VEYXRhID0gZ2V0SW1hZ2VEYXRhRnJvbUNhbnZhcyhjYW52YXMsIHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQpO1xuICAgIGltYWdlRGF0YSA9IHByb2Nlc3NJbWFnZURhdGFSR0JBKGltYWdlRGF0YSwgdG9wWCwgdG9wWSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKTtcbiAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCB0b3BYLCB0b3BZKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtJbWFnZURhdGF9IGltYWdlRGF0YVxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFhcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BZXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtGbG9hdH0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHtJbWFnZURhdGF9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0ltYWdlRGF0YVJHQkEoaW1hZ2VEYXRhLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgICB2YXIgcGl4ZWxzID0gaW1hZ2VEYXRhLmRhdGE7XG4gICAgdmFyIGRpdiA9IDIgKiByYWRpdXMgKyAxOyAvLyBjb25zdCB3NCA9IHdpZHRoIDw8IDI7XG5cbiAgICB2YXIgd2lkdGhNaW51czEgPSB3aWR0aCAtIDE7XG4gICAgdmFyIGhlaWdodE1pbnVzMSA9IGhlaWdodCAtIDE7XG4gICAgdmFyIHJhZGl1c1BsdXMxID0gcmFkaXVzICsgMTtcbiAgICB2YXIgc3VtRmFjdG9yID0gcmFkaXVzUGx1czEgKiAocmFkaXVzUGx1czEgKyAxKSAvIDI7XG4gICAgdmFyIHN0YWNrU3RhcnQgPSBuZXcgQmx1clN0YWNrKCk7XG4gICAgdmFyIHN0YWNrID0gc3RhY2tTdGFydDtcbiAgICB2YXIgc3RhY2tFbmQ7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGRpdjsgaSsrKSB7XG4gICAgICBzdGFjayA9IHN0YWNrLm5leHQgPSBuZXcgQmx1clN0YWNrKCk7XG5cbiAgICAgIGlmIChpID09PSByYWRpdXNQbHVzMSkge1xuICAgICAgICBzdGFja0VuZCA9IHN0YWNrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YWNrLm5leHQgPSBzdGFja1N0YXJ0O1xuICAgIHZhciBzdGFja0luID0gbnVsbCxcbiAgICAgICAgc3RhY2tPdXQgPSBudWxsLFxuICAgICAgICB5dyA9IDAsXG4gICAgICAgIHlpID0gMDtcbiAgICB2YXIgbXVsU3VtID0gbXVsVGFibGVbcmFkaXVzXTtcbiAgICB2YXIgc2hnU3VtID0gc2hnVGFibGVbcmFkaXVzXTtcblxuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIHN0YWNrID0gc3RhY2tTdGFydDtcbiAgICAgIHZhciBwciA9IHBpeGVsc1t5aV0sXG4gICAgICAgICAgcGcgPSBwaXhlbHNbeWkgKyAxXSxcbiAgICAgICAgICBwYiA9IHBpeGVsc1t5aSArIDJdLFxuICAgICAgICAgIHBhID0gcGl4ZWxzW3lpICsgM107XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCByYWRpdXNQbHVzMTsgX2krKykge1xuICAgICAgICBzdGFjay5yID0gcHI7XG4gICAgICAgIHN0YWNrLmcgPSBwZztcbiAgICAgICAgc3RhY2suYiA9IHBiO1xuICAgICAgICBzdGFjay5hID0gcGE7XG4gICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJJblN1bSA9IDAsXG4gICAgICAgICAgZ0luU3VtID0gMCxcbiAgICAgICAgICBiSW5TdW0gPSAwLFxuICAgICAgICAgIGFJblN1bSA9IDAsXG4gICAgICAgICAgck91dFN1bSA9IHJhZGl1c1BsdXMxICogcHIsXG4gICAgICAgICAgZ091dFN1bSA9IHJhZGl1c1BsdXMxICogcGcsXG4gICAgICAgICAgYk91dFN1bSA9IHJhZGl1c1BsdXMxICogcGIsXG4gICAgICAgICAgYU91dFN1bSA9IHJhZGl1c1BsdXMxICogcGEsXG4gICAgICAgICAgclN1bSA9IHN1bUZhY3RvciAqIHByLFxuICAgICAgICAgIGdTdW0gPSBzdW1GYWN0b3IgKiBwZyxcbiAgICAgICAgICBiU3VtID0gc3VtRmFjdG9yICogcGIsXG4gICAgICAgICAgYVN1bSA9IHN1bUZhY3RvciAqIHBhO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSAxOyBfaTIgPCByYWRpdXNQbHVzMTsgX2kyKyspIHtcbiAgICAgICAgdmFyIHAgPSB5aSArICgod2lkdGhNaW51czEgPCBfaTIgPyB3aWR0aE1pbnVzMSA6IF9pMikgPDwgMik7XG4gICAgICAgIHZhciByID0gcGl4ZWxzW3BdLFxuICAgICAgICAgICAgZyA9IHBpeGVsc1twICsgMV0sXG4gICAgICAgICAgICBiID0gcGl4ZWxzW3AgKyAyXSxcbiAgICAgICAgICAgIGEgPSBwaXhlbHNbcCArIDNdO1xuICAgICAgICB2YXIgcmJzID0gcmFkaXVzUGx1czEgLSBfaTI7XG4gICAgICAgIHJTdW0gKz0gKHN0YWNrLnIgPSByKSAqIHJicztcbiAgICAgICAgZ1N1bSArPSAoc3RhY2suZyA9IGcpICogcmJzO1xuICAgICAgICBiU3VtICs9IChzdGFjay5iID0gYikgKiByYnM7XG4gICAgICAgIGFTdW0gKz0gKHN0YWNrLmEgPSBhKSAqIHJicztcbiAgICAgICAgckluU3VtICs9IHI7XG4gICAgICAgIGdJblN1bSArPSBnO1xuICAgICAgICBiSW5TdW0gKz0gYjtcbiAgICAgICAgYUluU3VtICs9IGE7XG4gICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgIH1cblxuICAgICAgc3RhY2tJbiA9IHN0YWNrU3RhcnQ7XG4gICAgICBzdGFja091dCA9IHN0YWNrRW5kO1xuXG4gICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgdmFyIHBhSW5pdGlhbCA9IGFTdW0gKiBtdWxTdW0gPj4+IHNoZ1N1bTtcbiAgICAgICAgcGl4ZWxzW3lpICsgM10gPSBwYUluaXRpYWw7XG5cbiAgICAgICAgaWYgKHBhSW5pdGlhbCAhPT0gMCkge1xuICAgICAgICAgIHZhciBfYTIgPSAyNTUgLyBwYUluaXRpYWw7XG5cbiAgICAgICAgICBwaXhlbHNbeWldID0gKHJTdW0gKiBtdWxTdW0gPj4+IHNoZ1N1bSkgKiBfYTI7XG4gICAgICAgICAgcGl4ZWxzW3lpICsgMV0gPSAoZ1N1bSAqIG11bFN1bSA+Pj4gc2hnU3VtKSAqIF9hMjtcbiAgICAgICAgICBwaXhlbHNbeWkgKyAyXSA9IChiU3VtICogbXVsU3VtID4+PiBzaGdTdW0pICogX2EyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpeGVsc1t5aV0gPSBwaXhlbHNbeWkgKyAxXSA9IHBpeGVsc1t5aSArIDJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJTdW0gLT0gck91dFN1bTtcbiAgICAgICAgZ1N1bSAtPSBnT3V0U3VtO1xuICAgICAgICBiU3VtIC09IGJPdXRTdW07XG4gICAgICAgIGFTdW0gLT0gYU91dFN1bTtcbiAgICAgICAgck91dFN1bSAtPSBzdGFja0luLnI7XG4gICAgICAgIGdPdXRTdW0gLT0gc3RhY2tJbi5nO1xuICAgICAgICBiT3V0U3VtIC09IHN0YWNrSW4uYjtcbiAgICAgICAgYU91dFN1bSAtPSBzdGFja0luLmE7XG5cbiAgICAgICAgdmFyIF9wID0geCArIHJhZGl1cyArIDE7XG5cbiAgICAgICAgX3AgPSB5dyArIChfcCA8IHdpZHRoTWludXMxID8gX3AgOiB3aWR0aE1pbnVzMSkgPDwgMjtcbiAgICAgICAgckluU3VtICs9IHN0YWNrSW4uciA9IHBpeGVsc1tfcF07XG4gICAgICAgIGdJblN1bSArPSBzdGFja0luLmcgPSBwaXhlbHNbX3AgKyAxXTtcbiAgICAgICAgYkluU3VtICs9IHN0YWNrSW4uYiA9IHBpeGVsc1tfcCArIDJdO1xuICAgICAgICBhSW5TdW0gKz0gc3RhY2tJbi5hID0gcGl4ZWxzW19wICsgM107XG4gICAgICAgIHJTdW0gKz0gckluU3VtO1xuICAgICAgICBnU3VtICs9IGdJblN1bTtcbiAgICAgICAgYlN1bSArPSBiSW5TdW07XG4gICAgICAgIGFTdW0gKz0gYUluU3VtO1xuICAgICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xuICAgICAgICB2YXIgX3N0YWNrT3V0ID0gc3RhY2tPdXQsXG4gICAgICAgICAgICBfciA9IF9zdGFja091dC5yLFxuICAgICAgICAgICAgX2cgPSBfc3RhY2tPdXQuZyxcbiAgICAgICAgICAgIF9iID0gX3N0YWNrT3V0LmIsXG4gICAgICAgICAgICBfYSA9IF9zdGFja091dC5hO1xuICAgICAgICByT3V0U3VtICs9IF9yO1xuICAgICAgICBnT3V0U3VtICs9IF9nO1xuICAgICAgICBiT3V0U3VtICs9IF9iO1xuICAgICAgICBhT3V0U3VtICs9IF9hO1xuICAgICAgICBySW5TdW0gLT0gX3I7XG4gICAgICAgIGdJblN1bSAtPSBfZztcbiAgICAgICAgYkluU3VtIC09IF9iO1xuICAgICAgICBhSW5TdW0gLT0gX2E7XG4gICAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcbiAgICAgICAgeWkgKz0gNDtcbiAgICAgIH1cblxuICAgICAgeXcgKz0gd2lkdGg7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX3ggPSAwOyBfeCA8IHdpZHRoOyBfeCsrKSB7XG4gICAgICB5aSA9IF94IDw8IDI7XG5cbiAgICAgIHZhciBfcHIgPSBwaXhlbHNbeWldLFxuICAgICAgICAgIF9wZyA9IHBpeGVsc1t5aSArIDFdLFxuICAgICAgICAgIF9wYiA9IHBpeGVsc1t5aSArIDJdLFxuICAgICAgICAgIF9wYSA9IHBpeGVsc1t5aSArIDNdLFxuICAgICAgICAgIF9yT3V0U3VtID0gcmFkaXVzUGx1czEgKiBfcHIsXG4gICAgICAgICAgX2dPdXRTdW0gPSByYWRpdXNQbHVzMSAqIF9wZyxcbiAgICAgICAgICBfYk91dFN1bSA9IHJhZGl1c1BsdXMxICogX3BiLFxuICAgICAgICAgIF9hT3V0U3VtID0gcmFkaXVzUGx1czEgKiBfcGEsXG4gICAgICAgICAgX3JTdW0gPSBzdW1GYWN0b3IgKiBfcHIsXG4gICAgICAgICAgX2dTdW0gPSBzdW1GYWN0b3IgKiBfcGcsXG4gICAgICAgICAgX2JTdW0gPSBzdW1GYWN0b3IgKiBfcGIsXG4gICAgICAgICAgX2FTdW0gPSBzdW1GYWN0b3IgKiBfcGE7XG5cbiAgICAgIHN0YWNrID0gc3RhY2tTdGFydDtcblxuICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgcmFkaXVzUGx1czE7IF9pMysrKSB7XG4gICAgICAgIHN0YWNrLnIgPSBfcHI7XG4gICAgICAgIHN0YWNrLmcgPSBfcGc7XG4gICAgICAgIHN0YWNrLmIgPSBfcGI7XG4gICAgICAgIHN0YWNrLmEgPSBfcGE7XG4gICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgIH1cblxuICAgICAgdmFyIHlwID0gd2lkdGg7XG4gICAgICB2YXIgX2dJblN1bSA9IDAsXG4gICAgICAgICAgX2JJblN1bSA9IDAsXG4gICAgICAgICAgX2FJblN1bSA9IDAsXG4gICAgICAgICAgX3JJblN1bSA9IDA7XG5cbiAgICAgIGZvciAodmFyIF9pNCA9IDE7IF9pNCA8PSByYWRpdXM7IF9pNCsrKSB7XG4gICAgICAgIHlpID0geXAgKyBfeCA8PCAyO1xuXG4gICAgICAgIHZhciBfcmJzID0gcmFkaXVzUGx1czEgLSBfaTQ7XG5cbiAgICAgICAgX3JTdW0gKz0gKHN0YWNrLnIgPSBfcHIgPSBwaXhlbHNbeWldKSAqIF9yYnM7XG4gICAgICAgIF9nU3VtICs9IChzdGFjay5nID0gX3BnID0gcGl4ZWxzW3lpICsgMV0pICogX3JicztcbiAgICAgICAgX2JTdW0gKz0gKHN0YWNrLmIgPSBfcGIgPSBwaXhlbHNbeWkgKyAyXSkgKiBfcmJzO1xuICAgICAgICBfYVN1bSArPSAoc3RhY2suYSA9IF9wYSA9IHBpeGVsc1t5aSArIDNdKSAqIF9yYnM7XG4gICAgICAgIF9ySW5TdW0gKz0gX3ByO1xuICAgICAgICBfZ0luU3VtICs9IF9wZztcbiAgICAgICAgX2JJblN1bSArPSBfcGI7XG4gICAgICAgIF9hSW5TdW0gKz0gX3BhO1xuICAgICAgICBzdGFjayA9IHN0YWNrLm5leHQ7XG5cbiAgICAgICAgaWYgKF9pNCA8IGhlaWdodE1pbnVzMSkge1xuICAgICAgICAgIHlwICs9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHlpID0gX3g7XG4gICAgICBzdGFja0luID0gc3RhY2tTdGFydDtcbiAgICAgIHN0YWNrT3V0ID0gc3RhY2tFbmQ7XG5cbiAgICAgIGZvciAodmFyIF95ID0gMDsgX3kgPCBoZWlnaHQ7IF95KyspIHtcbiAgICAgICAgdmFyIF9wMiA9IHlpIDw8IDI7XG5cbiAgICAgICAgcGl4ZWxzW19wMiArIDNdID0gX3BhID0gX2FTdW0gKiBtdWxTdW0gPj4+IHNoZ1N1bTtcblxuICAgICAgICBpZiAoX3BhID4gMCkge1xuICAgICAgICAgIF9wYSA9IDI1NSAvIF9wYTtcbiAgICAgICAgICBwaXhlbHNbX3AyXSA9IChfclN1bSAqIG11bFN1bSA+Pj4gc2hnU3VtKSAqIF9wYTtcbiAgICAgICAgICBwaXhlbHNbX3AyICsgMV0gPSAoX2dTdW0gKiBtdWxTdW0gPj4+IHNoZ1N1bSkgKiBfcGE7XG4gICAgICAgICAgcGl4ZWxzW19wMiArIDJdID0gKF9iU3VtICogbXVsU3VtID4+PiBzaGdTdW0pICogX3BhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBpeGVsc1tfcDJdID0gcGl4ZWxzW19wMiArIDFdID0gcGl4ZWxzW19wMiArIDJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yU3VtIC09IF9yT3V0U3VtO1xuICAgICAgICBfZ1N1bSAtPSBfZ091dFN1bTtcbiAgICAgICAgX2JTdW0gLT0gX2JPdXRTdW07XG4gICAgICAgIF9hU3VtIC09IF9hT3V0U3VtO1xuICAgICAgICBfck91dFN1bSAtPSBzdGFja0luLnI7XG4gICAgICAgIF9nT3V0U3VtIC09IHN0YWNrSW4uZztcbiAgICAgICAgX2JPdXRTdW0gLT0gc3RhY2tJbi5iO1xuICAgICAgICBfYU91dFN1bSAtPSBzdGFja0luLmE7XG4gICAgICAgIF9wMiA9IF94ICsgKChfcDIgPSBfeSArIHJhZGl1c1BsdXMxKSA8IGhlaWdodE1pbnVzMSA/IF9wMiA6IGhlaWdodE1pbnVzMSkgKiB3aWR0aCA8PCAyO1xuICAgICAgICBfclN1bSArPSBfckluU3VtICs9IHN0YWNrSW4uciA9IHBpeGVsc1tfcDJdO1xuICAgICAgICBfZ1N1bSArPSBfZ0luU3VtICs9IHN0YWNrSW4uZyA9IHBpeGVsc1tfcDIgKyAxXTtcbiAgICAgICAgX2JTdW0gKz0gX2JJblN1bSArPSBzdGFja0luLmIgPSBwaXhlbHNbX3AyICsgMl07XG4gICAgICAgIF9hU3VtICs9IF9hSW5TdW0gKz0gc3RhY2tJbi5hID0gcGl4ZWxzW19wMiArIDNdO1xuICAgICAgICBzdGFja0luID0gc3RhY2tJbi5uZXh0O1xuICAgICAgICBfck91dFN1bSArPSBfcHIgPSBzdGFja091dC5yO1xuICAgICAgICBfZ091dFN1bSArPSBfcGcgPSBzdGFja091dC5nO1xuICAgICAgICBfYk91dFN1bSArPSBfcGIgPSBzdGFja091dC5iO1xuICAgICAgICBfYU91dFN1bSArPSBfcGEgPSBzdGFja091dC5hO1xuICAgICAgICBfckluU3VtIC09IF9wcjtcbiAgICAgICAgX2dJblN1bSAtPSBfcGc7XG4gICAgICAgIF9iSW5TdW0gLT0gX3BiO1xuICAgICAgICBfYUluU3VtIC09IF9wYTtcbiAgICAgICAgc3RhY2tPdXQgPSBzdGFja091dC5uZXh0O1xuICAgICAgICB5aSArPSB3aWR0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW1hZ2VEYXRhO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXNcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BYXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gdG9wWVxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7RmxvYXR9IHJhZGl1c1xuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NDYW52YXNSR0IoY2FudmFzLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPCAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmFkaXVzIHw9IDA7XG4gICAgdmFyIGltYWdlRGF0YSA9IGdldEltYWdlRGF0YUZyb21DYW52YXMoY2FudmFzLCB0b3BYLCB0b3BZLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBpbWFnZURhdGEgPSBwcm9jZXNzSW1hZ2VEYXRhUkdCKGltYWdlRGF0YSwgdG9wWCwgdG9wWSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKTtcbiAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCB0b3BYLCB0b3BZKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtJbWFnZURhdGF9IGltYWdlRGF0YVxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHRvcFhcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB0b3BZXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtGbG9hdH0gcmFkaXVzXG4gICAqIEByZXR1cm5zIHtJbWFnZURhdGF9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0ltYWdlRGF0YVJHQihpbWFnZURhdGEsIHRvcFgsIHRvcFksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykge1xuICAgIHZhciBwaXhlbHMgPSBpbWFnZURhdGEuZGF0YTtcbiAgICB2YXIgZGl2ID0gMiAqIHJhZGl1cyArIDE7IC8vIGNvbnN0IHc0ID0gd2lkdGggPDwgMjtcblxuICAgIHZhciB3aWR0aE1pbnVzMSA9IHdpZHRoIC0gMTtcbiAgICB2YXIgaGVpZ2h0TWludXMxID0gaGVpZ2h0IC0gMTtcbiAgICB2YXIgcmFkaXVzUGx1czEgPSByYWRpdXMgKyAxO1xuICAgIHZhciBzdW1GYWN0b3IgPSByYWRpdXNQbHVzMSAqIChyYWRpdXNQbHVzMSArIDEpIC8gMjtcbiAgICB2YXIgc3RhY2tTdGFydCA9IG5ldyBCbHVyU3RhY2soKTtcbiAgICB2YXIgc3RhY2sgPSBzdGFja1N0YXJ0O1xuICAgIHZhciBzdGFja0VuZDtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgZGl2OyBpKyspIHtcbiAgICAgIHN0YWNrID0gc3RhY2submV4dCA9IG5ldyBCbHVyU3RhY2soKTtcblxuICAgICAgaWYgKGkgPT09IHJhZGl1c1BsdXMxKSB7XG4gICAgICAgIHN0YWNrRW5kID0gc3RhY2s7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhY2submV4dCA9IHN0YWNrU3RhcnQ7XG4gICAgdmFyIHN0YWNrSW4gPSBudWxsO1xuICAgIHZhciBzdGFja091dCA9IG51bGw7XG4gICAgdmFyIG11bFN1bSA9IG11bFRhYmxlW3JhZGl1c107XG4gICAgdmFyIHNoZ1N1bSA9IHNoZ1RhYmxlW3JhZGl1c107XG4gICAgdmFyIHAsIHJicztcbiAgICB2YXIgeXcgPSAwLFxuICAgICAgICB5aSA9IDA7XG5cbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICB2YXIgcHIgPSBwaXhlbHNbeWldLFxuICAgICAgICAgIHBnID0gcGl4ZWxzW3lpICsgMV0sXG4gICAgICAgICAgcGIgPSBwaXhlbHNbeWkgKyAyXSxcbiAgICAgICAgICByT3V0U3VtID0gcmFkaXVzUGx1czEgKiBwcixcbiAgICAgICAgICBnT3V0U3VtID0gcmFkaXVzUGx1czEgKiBwZyxcbiAgICAgICAgICBiT3V0U3VtID0gcmFkaXVzUGx1czEgKiBwYixcbiAgICAgICAgICByU3VtID0gc3VtRmFjdG9yICogcHIsXG4gICAgICAgICAgZ1N1bSA9IHN1bUZhY3RvciAqIHBnLFxuICAgICAgICAgIGJTdW0gPSBzdW1GYWN0b3IgKiBwYjtcbiAgICAgIHN0YWNrID0gc3RhY2tTdGFydDtcblxuICAgICAgZm9yICh2YXIgX2k1ID0gMDsgX2k1IDwgcmFkaXVzUGx1czE7IF9pNSsrKSB7XG4gICAgICAgIHN0YWNrLnIgPSBwcjtcbiAgICAgICAgc3RhY2suZyA9IHBnO1xuICAgICAgICBzdGFjay5iID0gcGI7XG4gICAgICAgIHN0YWNrID0gc3RhY2submV4dDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJJblN1bSA9IDAsXG4gICAgICAgICAgZ0luU3VtID0gMCxcbiAgICAgICAgICBiSW5TdW0gPSAwO1xuXG4gICAgICBmb3IgKHZhciBfaTYgPSAxOyBfaTYgPCByYWRpdXNQbHVzMTsgX2k2KyspIHtcbiAgICAgICAgcCA9IHlpICsgKCh3aWR0aE1pbnVzMSA8IF9pNiA/IHdpZHRoTWludXMxIDogX2k2KSA8PCAyKTtcbiAgICAgICAgclN1bSArPSAoc3RhY2suciA9IHByID0gcGl4ZWxzW3BdKSAqIChyYnMgPSByYWRpdXNQbHVzMSAtIF9pNik7XG4gICAgICAgIGdTdW0gKz0gKHN0YWNrLmcgPSBwZyA9IHBpeGVsc1twICsgMV0pICogcmJzO1xuICAgICAgICBiU3VtICs9IChzdGFjay5iID0gcGIgPSBwaXhlbHNbcCArIDJdKSAqIHJicztcbiAgICAgICAgckluU3VtICs9IHByO1xuICAgICAgICBnSW5TdW0gKz0gcGc7XG4gICAgICAgIGJJblN1bSArPSBwYjtcbiAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuICAgICAgfVxuXG4gICAgICBzdGFja0luID0gc3RhY2tTdGFydDtcbiAgICAgIHN0YWNrT3V0ID0gc3RhY2tFbmQ7XG5cbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICBwaXhlbHNbeWldID0gclN1bSAqIG11bFN1bSA+Pj4gc2hnU3VtO1xuICAgICAgICBwaXhlbHNbeWkgKyAxXSA9IGdTdW0gKiBtdWxTdW0gPj4+IHNoZ1N1bTtcbiAgICAgICAgcGl4ZWxzW3lpICsgMl0gPSBiU3VtICogbXVsU3VtID4+PiBzaGdTdW07XG4gICAgICAgIHJTdW0gLT0gck91dFN1bTtcbiAgICAgICAgZ1N1bSAtPSBnT3V0U3VtO1xuICAgICAgICBiU3VtIC09IGJPdXRTdW07XG4gICAgICAgIHJPdXRTdW0gLT0gc3RhY2tJbi5yO1xuICAgICAgICBnT3V0U3VtIC09IHN0YWNrSW4uZztcbiAgICAgICAgYk91dFN1bSAtPSBzdGFja0luLmI7XG4gICAgICAgIHAgPSB5dyArICgocCA9IHggKyByYWRpdXMgKyAxKSA8IHdpZHRoTWludXMxID8gcCA6IHdpZHRoTWludXMxKSA8PCAyO1xuICAgICAgICBySW5TdW0gKz0gc3RhY2tJbi5yID0gcGl4ZWxzW3BdO1xuICAgICAgICBnSW5TdW0gKz0gc3RhY2tJbi5nID0gcGl4ZWxzW3AgKyAxXTtcbiAgICAgICAgYkluU3VtICs9IHN0YWNrSW4uYiA9IHBpeGVsc1twICsgMl07XG4gICAgICAgIHJTdW0gKz0gckluU3VtO1xuICAgICAgICBnU3VtICs9IGdJblN1bTtcbiAgICAgICAgYlN1bSArPSBiSW5TdW07XG4gICAgICAgIHN0YWNrSW4gPSBzdGFja0luLm5leHQ7XG4gICAgICAgIHJPdXRTdW0gKz0gcHIgPSBzdGFja091dC5yO1xuICAgICAgICBnT3V0U3VtICs9IHBnID0gc3RhY2tPdXQuZztcbiAgICAgICAgYk91dFN1bSArPSBwYiA9IHN0YWNrT3V0LmI7XG4gICAgICAgIHJJblN1bSAtPSBwcjtcbiAgICAgICAgZ0luU3VtIC09IHBnO1xuICAgICAgICBiSW5TdW0gLT0gcGI7XG4gICAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcbiAgICAgICAgeWkgKz0gNDtcbiAgICAgIH1cblxuICAgICAgeXcgKz0gd2lkdGg7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX3gyID0gMDsgX3gyIDwgd2lkdGg7IF94MisrKSB7XG4gICAgICB5aSA9IF94MiA8PCAyO1xuXG4gICAgICB2YXIgX3ByMiA9IHBpeGVsc1t5aV0sXG4gICAgICAgICAgX3BnMiA9IHBpeGVsc1t5aSArIDFdLFxuICAgICAgICAgIF9wYjIgPSBwaXhlbHNbeWkgKyAyXSxcbiAgICAgICAgICBfck91dFN1bTIgPSByYWRpdXNQbHVzMSAqIF9wcjIsXG4gICAgICAgICAgX2dPdXRTdW0yID0gcmFkaXVzUGx1czEgKiBfcGcyLFxuICAgICAgICAgIF9iT3V0U3VtMiA9IHJhZGl1c1BsdXMxICogX3BiMixcbiAgICAgICAgICBfclN1bTIgPSBzdW1GYWN0b3IgKiBfcHIyLFxuICAgICAgICAgIF9nU3VtMiA9IHN1bUZhY3RvciAqIF9wZzIsXG4gICAgICAgICAgX2JTdW0yID0gc3VtRmFjdG9yICogX3BiMjtcblxuICAgICAgc3RhY2sgPSBzdGFja1N0YXJ0O1xuXG4gICAgICBmb3IgKHZhciBfaTcgPSAwOyBfaTcgPCByYWRpdXNQbHVzMTsgX2k3KyspIHtcbiAgICAgICAgc3RhY2suciA9IF9wcjI7XG4gICAgICAgIHN0YWNrLmcgPSBfcGcyO1xuICAgICAgICBzdGFjay5iID0gX3BiMjtcbiAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuICAgICAgfVxuXG4gICAgICB2YXIgX3JJblN1bTIgPSAwLFxuICAgICAgICAgIF9nSW5TdW0yID0gMCxcbiAgICAgICAgICBfYkluU3VtMiA9IDA7XG5cbiAgICAgIGZvciAodmFyIF9pOCA9IDEsIHlwID0gd2lkdGg7IF9pOCA8PSByYWRpdXM7IF9pOCsrKSB7XG4gICAgICAgIHlpID0geXAgKyBfeDIgPDwgMjtcbiAgICAgICAgX3JTdW0yICs9IChzdGFjay5yID0gX3ByMiA9IHBpeGVsc1t5aV0pICogKHJicyA9IHJhZGl1c1BsdXMxIC0gX2k4KTtcbiAgICAgICAgX2dTdW0yICs9IChzdGFjay5nID0gX3BnMiA9IHBpeGVsc1t5aSArIDFdKSAqIHJicztcbiAgICAgICAgX2JTdW0yICs9IChzdGFjay5iID0gX3BiMiA9IHBpeGVsc1t5aSArIDJdKSAqIHJicztcbiAgICAgICAgX3JJblN1bTIgKz0gX3ByMjtcbiAgICAgICAgX2dJblN1bTIgKz0gX3BnMjtcbiAgICAgICAgX2JJblN1bTIgKz0gX3BiMjtcbiAgICAgICAgc3RhY2sgPSBzdGFjay5uZXh0O1xuXG4gICAgICAgIGlmIChfaTggPCBoZWlnaHRNaW51czEpIHtcbiAgICAgICAgICB5cCArPSB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB5aSA9IF94MjtcbiAgICAgIHN0YWNrSW4gPSBzdGFja1N0YXJ0O1xuICAgICAgc3RhY2tPdXQgPSBzdGFja0VuZDtcblxuICAgICAgZm9yICh2YXIgX3kyID0gMDsgX3kyIDwgaGVpZ2h0OyBfeTIrKykge1xuICAgICAgICBwID0geWkgPDwgMjtcbiAgICAgICAgcGl4ZWxzW3BdID0gX3JTdW0yICogbXVsU3VtID4+PiBzaGdTdW07XG4gICAgICAgIHBpeGVsc1twICsgMV0gPSBfZ1N1bTIgKiBtdWxTdW0gPj4+IHNoZ1N1bTtcbiAgICAgICAgcGl4ZWxzW3AgKyAyXSA9IF9iU3VtMiAqIG11bFN1bSA+Pj4gc2hnU3VtO1xuICAgICAgICBfclN1bTIgLT0gX3JPdXRTdW0yO1xuICAgICAgICBfZ1N1bTIgLT0gX2dPdXRTdW0yO1xuICAgICAgICBfYlN1bTIgLT0gX2JPdXRTdW0yO1xuICAgICAgICBfck91dFN1bTIgLT0gc3RhY2tJbi5yO1xuICAgICAgICBfZ091dFN1bTIgLT0gc3RhY2tJbi5nO1xuICAgICAgICBfYk91dFN1bTIgLT0gc3RhY2tJbi5iO1xuICAgICAgICBwID0gX3gyICsgKChwID0gX3kyICsgcmFkaXVzUGx1czEpIDwgaGVpZ2h0TWludXMxID8gcCA6IGhlaWdodE1pbnVzMSkgKiB3aWR0aCA8PCAyO1xuICAgICAgICBfclN1bTIgKz0gX3JJblN1bTIgKz0gc3RhY2tJbi5yID0gcGl4ZWxzW3BdO1xuICAgICAgICBfZ1N1bTIgKz0gX2dJblN1bTIgKz0gc3RhY2tJbi5nID0gcGl4ZWxzW3AgKyAxXTtcbiAgICAgICAgX2JTdW0yICs9IF9iSW5TdW0yICs9IHN0YWNrSW4uYiA9IHBpeGVsc1twICsgMl07XG4gICAgICAgIHN0YWNrSW4gPSBzdGFja0luLm5leHQ7XG4gICAgICAgIF9yT3V0U3VtMiArPSBfcHIyID0gc3RhY2tPdXQucjtcbiAgICAgICAgX2dPdXRTdW0yICs9IF9wZzIgPSBzdGFja091dC5nO1xuICAgICAgICBfYk91dFN1bTIgKz0gX3BiMiA9IHN0YWNrT3V0LmI7XG4gICAgICAgIF9ySW5TdW0yIC09IF9wcjI7XG4gICAgICAgIF9nSW5TdW0yIC09IF9wZzI7XG4gICAgICAgIF9iSW5TdW0yIC09IF9wYjI7XG4gICAgICAgIHN0YWNrT3V0ID0gc3RhY2tPdXQubmV4dDtcbiAgICAgICAgeWkgKz0gd2lkdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGltYWdlRGF0YTtcbiAgfVxuICAvKipcbiAgICpcbiAgICovXG5cblxuICB2YXIgQmx1clN0YWNrID1cbiAgLyoqXG4gICAqIFNldCBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gQmx1clN0YWNrKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbHVyU3RhY2spO1xuXG4gICAgdGhpcy5yID0gMDtcbiAgICB0aGlzLmcgPSAwO1xuICAgIHRoaXMuYiA9IDA7XG4gICAgdGhpcy5hID0gMDtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICB9O1xuXG4gIGV4cG9ydHMuQmx1clN0YWNrID0gQmx1clN0YWNrO1xuICBleHBvcnRzLmNhbnZhc1JHQiA9IHByb2Nlc3NDYW52YXNSR0I7XG4gIGV4cG9ydHMuY2FudmFzUkdCQSA9IHByb2Nlc3NDYW52YXNSR0JBO1xuICBleHBvcnRzLmltYWdlID0gcHJvY2Vzc0ltYWdlO1xuICBleHBvcnRzLmltYWdlRGF0YVJHQiA9IHByb2Nlc3NJbWFnZURhdGFSR0I7XG4gIGV4cG9ydHMuaW1hZ2VEYXRhUkdCQSA9IHByb2Nlc3NJbWFnZURhdGFSR0JBO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stackblur-canvas/dist/stackblur.js\n");

/***/ })

};
;